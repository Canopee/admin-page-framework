== New Features ==
<h3>User Meta Fields</h3>

Now you can add custom fields in the user profile page so that each user can store their own options.

![User Meta Fields](%PLUGIN_DIR_URL%/asset/image/new_feature/user_meta_fields.jpg "User Mata Fields")

<h3>Framework Loader</h3>
The plugin is no longer a demo plugin of Admin Page Framework but it serves as a framework loader and make the framework functionality available to the entire site. 

If you choose it to activate this plugin, and let it run in the background, you don't have to manually include the framework file in your plugins or themes. 


== Introduction ==
<h2>Experience the power of OOP based development!</h2>

![Objects](%PLUGIN_DIR_URL%/asset/image/about/objects.png "Objects")

> One of the time-consuming part of developing WordPress plugins and themes is creating setting pages.
> As you more and more write plugins and themes, you'll soon realize major part of code can be reused.
> Admin Page Framework aims to provide reusable code that eliminates the necessity of writing repeated code over and over again.
> 
> With object oriented programming (class based), you can reuse sets of code by extending base classes and create your own version of them. 
> Admin Page Framework consists of several abstract factory classes that you extend.
> You just add your code on top of it. It naturally becomes extensible, highly customizable, and more organized.
>
> Moreover, Admin Page Framework inserts filter and action hooks as you build your pages and forms.
> Your program will be automatically extensible by allowing third party developers to add more features.

== Getting Started ==

![My First Page](%PLUGIN_DIR_URL%/asset/image/getting_started/my_first_page.png "My First Page")

<h3>Write your First Plugin</h3>
Let's create a very simple plugin to understand the whole workflow of using Admin Page Framework.

<h3>Step 1 - Get the File</h3>

![Minifier](%PLUGIN_DIR_URL%/asset/image/getting_started/my_first_plugin.png "Minifier")

First, you need to have your own copy of the framework file. 

1. Go to **Dashboard** -> **Admin Page Framework** -> **Tools** -> **[Minifier](%WP_ADMIN_URL%/admin.php?page=apfl_tools)**.
2. **(Important!)** Enter your unique prefix. If your plugin is named, let's say "My First Plugin" then you may set the prefix "`MyFirstPlugin_`".
3. Also set the file name there, `my-first-admin-page-framework.min.php` as an example.
4. Download the file by pressing **Download**.

<h3>Step 2 - Include the Framework</h3>

Now it is time to code. In your code editor, insert your plugin header comment to tell WordPress that it is a plugin.

`
/* Plugin Name: My Plugin */
`

Include the file you just downloaded. Assuming your class prefix set in the above step is `MyFirstPlugin_`, then your factory class name to extend will be `MyFirstPlugin_AdminPageFramework`. If you have not set the prefix, it will be just `AdminPageFramework`.

So check if that class name has been already loaded. And if not, load it. To load a PHP file, you need to call the `include()` PHP function.

`
include( dirname( __FILE__ ) . '/library/my-first-admin-page-framework.min.php' );
if ( ! class_exists( 'MyFirstPlugin_AdminPageFramework' ) ) {
    return;
}
`

<h3>Step 3 - Extend the Factory Class</h3>
By extending the framework admin factory class, you can add your own desired functionality on top of it.

`
class MyFirstPlugin extends MyFirstPlugin_AdminPageFramework {

  ... our code comes here ...
   
}
`

<h3>Step 4 - Define the <em>setUp()</em> Method</h3>
Now we need to tell the framework what page to create. 
The factory class already defines certain methods. If you extend the class, your extended class already has those methods.
The `setUp()` method is one of them, and in this method, you set up necessary configurations.

The `setRootMenuPage()` method allows you to set the top-level page and the `addSubMenuItem()` method allows you to add sub-menu pages and links.

Let's add a page to the `Settings` page. You need to decide what pag slug to use. Pick a unique one. Here we use `my_first_page` as an example.

`
public function setUp() {
    $this->setRootMenuPage( 'Settings' ); 
    $this->addSubMenuItem(
        array(
            'title'     => 'My First Page',
            'page_slug' => 'my_first_page',
        )
    ); 
}
`

<h3>Step 5 - Define the Methods for Hooks</h3>
Now you can insert your own output of the page with some of the pre-defined callback methods.

One of it is `do_{page slug}` method. You define a method named like so and it will be automatically gets called.

`
public function do_my_first_page() {
    ?>
    <h3>Say Something</h3>
    <p>This is my first admin page!</p>
    <?php
}
`

<h3>Step 6 - Instantiate the Class</h3>
You need to instantiate the class you defined. When it is instantiated, it will run the internal constructor method and it will take care of everything needed to create admin pages for you.

`
new MyFirstPlugin;
`

![Plugin Listed](%PLUGIN_DIR_URL%/asset/image/getting_started/my_first_plugin_in_plugin_list_table.png "Plugin Listed")

And your code is now ready to run as a plugin. Compress it in a zip file and upload it to your WordPres site.

<h3>Example Plugin</h3>
**[Download](https://github.com/michaeluno/my-first-plugin/archive/master.zip)**
`
<?php
/* Plugin Name: My First Plugin */ 

// Set your own path here
include( dirname( __FILE__ ) . '/library/my-first-admin-page-framework.min.php' );
if ( ! class_exists( 'MyFirstPlugin_AdminPageFramework' ) ) {
    return;
}

class MyFirstPlugin extends MyFirstPlugin_AdminPageFramework {
    
    /**
     * Sets up pages. 
     */
    public function setUp() {
        $this->setRootMenuPage( 'Settings' ); 
        $this->addSubMenuItem(
            array(
                'title'     => 'My First Page',
                'page_slug' => 'my_first_page'
            )
        );
    }
    
    /**
     * Triggered in the middle of rendering the page.
     * 
     * Inserts your custom contents here.
     * 
     * @remark      do_{page slug}
     */
    public function do_my_first_page() {
        ?>
        <h3>Say Something</h3>
        <p>This is my first admin page!</p>
        <?php   
    }

}

new MyFirstPlugin;
`

See it's very short and simple, huh?

There are different types of factory classes for different functionality besides the admin page factory class you just used.

By extending them like just you did, you can create post types, meta boxes, widgets, user meta fields, and taxonomy fields.

== Tutorials ==
Check out the [tutorials](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/) as well.

1. [Create an Admin Page](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/01-create-an-admin-page/)
2. [Create a Form](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/02-create-a-form/)
3. [Create a Page Group](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/03-create-a-page-group/)
4. [Create In-page Tabs](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/04-create-inpage-tabs/)
5. [Organize a Form with Sections](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/05-organize-a-form-with-sections/)
6. [Use Section Tabs and Repeatable Sections](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/06-use-section-tabs-and-repeatable-sections/)
7. [Validate Submitted Form Data of a Single Field](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/07-validate-submitted-form-data-of-a-single-field/)
8. [Validate Submitted Form Data of Multiple Fields](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/08-validate-submitted-form-data-of-multiple-fields/)
9. [Add a Meta Box in an Admin Page](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/09-add-a-meta-box-in-an-admin-page/)
10. [Add a Page Meta Box Specific to an In-page Tab](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/10-add-a-page-meta-box-specific-to-an-in-page-tab/)
11. [Add a Meta Box for Posts](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/11-add-a-meta-box-for-posts/)
12. [Create a Custom Post Type and Custom Taxonomy](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/12-create-a-custom-post-type-and-custom-taxonomy/)
13. [Add a Meta Box to a Custom Post Type](http://en.michaeluno.jp/admin-page-framework/tutorials-v3/13-add-a-meta-box-for-a-custom-post-type/)

== Examples ==

= Create a Form =

`<?php
/* Plugin Name: Admin Page Framework - My First Form */ 

if ( ! class_exists( 'AdminPageFramework' ) ) {
    include( dirname( __FILE__ ) . '/library/admin-page-framework.min.php' );
}
    
class APF_MyFirstFrom extends AdminPageFramework {

    public function setUp() {
        
        $this->setRootMenuPage( 'My Settings' );    // create a root page 
        $this->addSubMenuItem(
            array(
                'title'     => 'My First Form',
                'page_slug' => 'my_first_form'
            )
        );
                            
    }
    
    /**
     * The pre-defined callback method that is triggered when the page loads.
     */
    public function load_my_first_form( $oAdminPage ) {    // load_{page slug}
    
        $this->addSettingFields(
            array(    
                'field_id'      => 'text',
                'title'         => 'Text',
                'type'          => 'text',
                'default'       => 123456,
            ),                     
            array(                 
                'field_id'      => 'submit',
                'type'          => 'submit',
            )
        );    
    
    }
    
    
}
new APF_MyFirstFrom;
`

= Create a Post Meta Box =
`
<?php
/* Plugin Name: Admin Page Framework - Post Meta Box Example */ 

if ( ! class_exists( 'AdminPageFramework' ) ) {
    include( dirname( __FILE__ ) . '/library/admin-page-framework.min.php' );
}
if ( ! class_exists( 'AdminPageFramework_MetaBox' ) ) {
    return;
}
class APF_MyMetaBox extends AdminPageFramework_MetaBox {
        

    public function setUp() {
                
        $this->addSettingFields(
            array(
                'field_id'      => 'checkbox_field',
                'type'          => 'checkbox',
                'title'         => __( 'Checkbox Input', 'admin-page-framework-demo' ),
                'description'   => __( 'The description for the field.', 'admin-page-framework-demo' ),
                'label'         => __( 'This is a check box.', 'admin-page-framework-demo' ),
            ),
            array(
                'field_id'      => 'select_filed',
                'type'          => 'select',
                'title'         => __( 'Select Box', 'admin-page-framework-demo' ),
                'description'   => __( 'The description for the field.', 'admin-page-framework-demo' ),
                'default'       => 'one', // 0 means the first item
                'label'         => array( 
                    'one'   => __( 'One', 'admin-page-framework-demo' ),
                    'two'   => __( 'Two', 'admin-page-framework-demo' ),
                    'three' => __( 'Three', 'admin-page-framework-demo' ),
                ),
            ),     
            array (
                'field_id'      => 'radio_field',
                'type'          => 'radio',
                'title'         => __( 'Radio Group', 'admin-page-framework-demo' ),
                'description'   => __( 'The description for the field.', 'admin-page-framework-demo' ),
                'default'       => 'one',
                'label'         => array( 
                    'one'   => __( 'This option is the first item of the radio button example field and lets the user choose one from many.', 'admin-page-framework-demo' ),
                    'two'   => __( 'This option is the second item of the radio button example field.', 'admin-page-framework-demo' ),
                    'three' => __( 'This option is the third item of the radio button example field.', 'admin-page-framework-demo' ),
                ),
            )
        );     

    }

    /**
     * One of the predefined validation callback methods,
     * 
     * Alternatively, you may use `validataion_{instantiated class name}()` method,
     */
    public function validate( $aInput, $aOldInput, $oAdmin ) {
        return $aInput;
    }
    
}
new APF_MyMetaBox(
    null,  // meta box ID - can be null. If null is passed, the ID gets automatically generated and the class name with all lower case characters will be applied.
    __( 'Admin Page Framework Meta Box Example', 'admin-page-framework-demo' ), // title
    array( 'post', 'page' ),                         // post type slugs: post, page, etc.
    'normal',                                        // context (what kind of metabox this is)
    'high'                                           // priority
);
`

= Create a Widget =
`
<?php
/* Plugin Name: Admin Page Framework - Widget Example */ 

if ( ! class_exists( 'AdminPageFramework' ) ) {
    include( dirname( __FILE__ ) . '/library/admin-page-framework.min.php' );
}
if ( ! class_exists( 'AdminPageFramework_Widget' ) ) {
    return;
}
class APF_MyWidget extends AdminPageFramework_Widget {
        
    /**
     * Sets up arguments.
     * 
     * Alternatively you may use set_up_{instantiated class name} method.
     */
    public function setUp() {

        $this->setArguments( 
            array(
                'description'   =>  __( 'This is a sample widget with built-in field types created by Admin Page Framework.', 'admin-page-framework-demo' ),
            ) 
        );
    
    }    

    /**
     * Sets up the form.
     * 
     * Alternatively you may use load_{instantiated class name} method.
     */
    public function load( $oAdminWidget ) {
        
        $this->addSettingFields(             
            array(
                'field_id'      => 'image',
                'type'          => 'image',
                'title'         => __( 'Image', 'admin-page-framework-demo' ),
            ),         
            array(
                'field_id'      => 'color',
                'type'          => 'color',
                'title'         => __( 'Color', 'admin-page-framework-demo' ),
            )
        );        

        
    }
    
    /**
     * Validates the submitted form data.
     * 
     * Alternatively you may use validation_{instantiated class name} method.
     */
    public function validate( $aSubmit, $aStored, $oAdminWidget ) {
            
        return $aSubmit;
        
    }    
    
    /**
     * Print out the contents in the front-end.
     * 
     * Alternatively you may use the content_{instantiated class name} method.
     */
    public function content( $sContent, $aArguments, $aFormData ) {
        
        return $sContent
            . '<p>' . __( 'Hello world! This is a widget created by Admin Page Framework.', 'admin-page-framework-demo' ) . '</p>'
            . AdminPageFramework_Debug::get( $aArguments )
            . AdminPageFramework_Debug::get( $aFormData );
    
    }
        
}
new APF_MyWidget( 
    __( 'My Widget', 'admin-page-framework-demo' ) // the widget title
);
`

= Create User Meta Fields =
`
<?php
/* Plugin Name: Admin Page Framework - User Meta Example */ 

if ( ! class_exists( 'AdminPageFramework' ) ) {
    include( dirname( __FILE__ ) . '/library/admin-page-framework.min.php' );
}
if ( ! class_exists( 'AdminPageFramework_UserMeta' ) ) {
    return;
}

class APF_MyUserMeta extends AdminPageFramework_UserMeta {
	
    public function setUp() {
                   
        $this->addSettingFields(
            array(    
                'field_id'      => 'text_field',
                'type'          => 'text',
                'title'         => __( 'Text', 'admin-page-framework-demo' ),
                'repeatable'    => true,
                'sortable'      => true,
                'description'   => 'Type something here.',   
            ),        
            array(    
                'field_id'      => 'text_area',
                'type'          => 'textarea',
                'title'         => __( 'Text Area', 'admin-page-framework-demo' ),
                'default'       => 'Hi there!',   
            ),        
            array(    
                'field_id'      => 'radio_buttons',
                'type'          => 'radio',
                'title'         => __( 'Radio', 'admin-page-framework-demo' ),
                'label'         => array(
                    'a' => 'A',
                    'b' => 'B',
                    'c' => 'C',
                ),
                'default'       => 'a',
            )          
        );      
        
    }
    
    /**
     * A pre-defined validation callback method.
     */
    public function validate( $aInput, $aOldInput, $oFactory ) {
        return $aInput;        
    }
    
}
new APF_MyUserMeta;
`

== Support ==
<h4>Documentation</h4>
- [Online Manual](http://admin-page-framework.michaeluno.jp/en/v3/).
- [Tutorials](http://en.michaeluno.jp/admin-page-framework/tutorials-v3)

<h4>Getting Helped</h4>
Have questions? Visit the [support forum](https://wordpress.org/support/plugin/admin-page-framework).

<h4>Help the Developer</h4>
Admin Page Framework won't grow without your support. There are various ways to contribute.

- Write a <strong>[review](https://wordpress.org/support/view/plugin-reviews/admin-page-framework?filter=5)</strong>.
- <strong>[Donate](http://en.michaeluno.jp/donate)</strong>.
- Post [ideas](https://github.com/michaeluno/admin-page-framework/issues?direction=desc&labels=Enhancement&page=1&sort=created&state=open).
- Translate.
- Report [bugs](https://github.com/michaeluno/admin-page-framework/issues).